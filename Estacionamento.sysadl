Model ParkingSystem;

package ParkingSystem.Types {
    value type Int {}
    value type Boolean {}
    value type String {}
    value type Void {}
    value type Real {}
    datatype Date {
        attributes: year: Int;
        month: Int;
        day: Int;
    }
    datatype Time {
        attributes: hour: Int;
        minute: Int;
    }
    enum PaymentConfirmation {
        confirmed, pending, declined
    }
    datatype VehiclePaymentRequest {
        attributes:
            vehicleLicense: String;
            paymentAmount: Real;
    }
    datatype VehicleExitRequest {
        attributes:
            vehicleLicense: String;
            exitDate: Date;
            exitTime: Time;
    }
    enum VehicleIdentificationMethod {
        licensePlateRecognition, proximityCard
    }
    datatype VehicleRegistrationInfo {
        attributes:
            vehicleLicense: String;
            ownerName: String;
            identificationMethod: VehicleIdentificationMethod;
            isOk: Boolean;
            identificationData: String;
            entryDate: Date;
            entryTime: Time;
            exitDate: Date;
            exitTime: Time;
    }
    datatype PaymentInfo {
        attributes:
            vehicleLicense: String;
        	isPaid: Boolean;
            paymentAmount: Real;
    }
    enum PaymentMethod {
        pix, creditCard
    }
    datatype SecurityCamera {
        attributes:
            cameraID: String;
            location: String;
            status: Boolean;
    }
    datatype AutomaticBarrier {
        attributes:
            barrierID: String;
            location: String;
            status: Boolean;
            isOpen: Boolean;
    }
    
    datatype PaymentEquipment {
        attributes:
            equipmentID: String;
            location: String;
            status: Boolean;
    }
    datatype BackupAndRecoveryRequest {
        attributes:
            requestID: String;
            action_: String; // e.g., backup, restore
            timestamp: String; // timestamp of the request
    }

    datatype BackupAndRecoveryResponse {
        attributes:
            requestID: String;
            status: String; // e.g., success, failure
            message: String; // description of the status
    }
    datatype LicensePlateData {
        attributes:
            plateNumber: String;
            isAltered: Boolean; // Indicates if the license plate is altered
    }

    datatype OperatorNotification {
        attributes:
            notificationID: String;
            message: String; // Notification message
    }
    datatype PerformanceData {
    attributes:
        timestamp: String;
        performanceMetrics: Real;
        status: Boolean;
}

datatype UpdateRequest {
    attributes:
        requestID: String;
        action_: String;
        timestamp: String;
}

datatype UpdateStatus {
    attributes:
        requestID: String;
        status: String;
        message: String;
}

datatype UserInput {
    attributes:
        userInputID: String;
        userInputData: String;
        timestamp: String;
}

datatype MaintenanceRequest {
    attributes:
        maintenanceID: String;
        maintenanceAction: String;
        equipmentID: String;
        timestamp: String;
}
    datatype MaintenanceResponse {
    attributes:
        maintenanceID: String;
        responseMessage: String;
        responseTimestamp: String;
}


    datatype ImageData {
        attributes:
            imageContent: String; // You can use this to store image data (e.g., in base64 format)
            timestamp: String;    // Timestamp associated with the image
    }

    datatype ProximityCardData {
        attributes:
            cardID: String;       // Unique identifier for the proximity card
            timestamp: String;    // Timestamp when the card was read
    }

    
}

package ParkingSystem.Ports {
    import ParkingSystem.Types;

    port def inVehicleEntry {
        flow in VehicleRegistrationInfo
    }

    port def outEntryConfirmation {
        flow out VehicleRegistrationInfo
    }

    port def inPaymentRequest {
        flow in VehiclePaymentRequest
    }

    port def outPaymentStatus {
        flow out PaymentConfirmation
    }
    
    port def inPaymentStatus {
        flow in PaymentConfirmation
    }

    port def inExitRequest {
        flow in VehicleRegistrationInfo
    }

    port def outExitConfirmation {
        flow out PaymentConfirmation
    }

    port def inVehicleIdentification {
        flow in VehicleIdentificationMethod
    }

    port def outVehicleRegistration {
        flow out VehicleRegistrationInfo
    }

    port def inPaymentInfo {
        flow in PaymentInfo
    }
    
    port def outPaymentInfo {
        flow out PaymentInfo
    }
    

    port def outPaymentConfirmation {
        flow out PaymentConfirmation
    }

    port def inPaymentMethod {
        flow in PaymentMethod
    }

    port def inSecurityCameraStatus {
        flow in SecurityCamera
    }

    port def outSecurityCameraStatus {
        flow out SecurityCamera
    }
    
    
    port def inImageData {
        flow in ImageData
    }
    

    port def outImageData {
        flow out ImageData
    }

    port def inAutomaticBarrierStatus {
        flow in AutomaticBarrier
    }

    port def outAutomaticBarrierStatus {
        flow out AutomaticBarrier
    }

    port def inPaymentEquipmentStatus {
        flow in PaymentEquipment
    }

    port def outPaymentEquipmentStatus {
        flow out PaymentEquipment
    }

    port def inIdentificationMethod {
        flow in VehicleIdentificationMethod
    }

    port def inRegistrationInfo {
        flow in VehicleRegistrationInfo
    }
    
    port def inBackupAndRecovery {
        flow in BackupAndRecoveryRequest
    }

    port def outBackupAndRecovery {
        flow out BackupAndRecoveryResponse
    }
    // Port for license plate detection
    port def inLicensePlateDetection {
        flow in LicensePlateData
    }

    port def outCarData {
        flow out VehicleRegistrationInfo
    }
    //
       port def inLoadBalancer {
        flow in PerformanceData
    }

    port def outLoadBalancer {
        flow out PerformanceData
    }

    port def inUserInput {
        flow in UserInput
    }
        port def outUserInput {
        flow in UserInput
    }

    port def inMaintenanceRequest {
        flow in MaintenanceRequest
    }
    
        port def outMaintenanceResponse {
        flow in MaintenanceResponse
    }

    port def inSystemUpdate {
        flow in UpdateRequest
    }

    port def outUpdateStatus {
        flow out UpdateStatus
}
}

package ParkingSystem.Connectors {
    import ParkingSystem.Ports;

    connector def vehicleInfo {
        participants:
            ~inEntry: inVehicleEntry {
            }
            ~outConfirmation: outEntryConfirmation {
            }
        flows:
            VehicleRegistrationInfo from inEntry to outConfirmation
    }

    connector def paymentRequest {
        participants:
            ~inRequest: inPaymentRequest {
            }
            ~outStatus: outPaymentStatus {
            }
        flows:
            VehiclePaymentRequest from inRequest to outStatus
    }

    connector def vehicleExit {
        participants:
            ~inRequest: inExitRequest {
            }
            ~outConfirmation: outExitConfirmation {
            }
        flows:
            VehicleRegistrationInfo from inRequest to outConfirmation
    }

    connector def vehicleIdentification {
        participants:
            ~inIdentification: inVehicleIdentification {}
            ~outRegistration: outVehicleRegistration {}
        flows:
            VehicleIdentificationMethod from inIdentification to outRegistration
    }

    connector def paymentInfo {
        participants:
            ~inPayment: inPaymentInfo {}
            ~outConfirmation: outPaymentConfirmation {}
        flows:
            PaymentInfo from inPayment to outConfirmation
    }

    connector def paymentMethod {
        participants:
            ~inMethod: inPaymentMethod {}
            ~outStatus: outPaymentStatus {}
        flows:
            PaymentMethod from inMethod to outStatus
    }

    connector def connectSecurityCamera {
        participants:
            ~inStatus: inSecurityCameraStatus {}
            ~outStatus: outSecurityCameraStatus {}
        flows:
            SecurityCamera from inStatus to outStatus
    }
    
        connector def connectImageData {
        participants:
            ~inImageData: inImageData {}
            ~outImageData: outImageData {}
        flows:
            ImageData from inImageData to outImageData
    }

    connector def connectAutomaticBarrier {
        participants:
            ~inStatus: inAutomaticBarrierStatus {}
            ~outStatus: outAutomaticBarrierStatus {}
        flows:
            AutomaticBarrier from inStatus to outStatus
    }

    connector def connectPaymentEquipment {
        participants:
            ~inStatus: inPaymentEquipmentStatus {}
            ~outStatus: outPaymentEquipmentStatus {}
        flows:
            PaymentEquipment from inStatus to outStatus
    }
    
    //
    
        connector def backupAndRecovery {
        participants:
            ~ inBackup: inBackupAndRecovery {}
            ~ outRecovery: outBackupAndRecovery {}
        flows:
            BackupAndRecoveryRequest from inBackup to outRecovery
            BackupAndRecoveryResponse from outRecovery to inBackup
    }
    
    
    connector def licensePlateDetection {
        participants:
            ~ inLicensePlate: inLicensePlateDetection {}
            ~ outNotification: outCarData {}
        flows:
            LicensePlateData from inLicensePlate to outNotification
    }
    //
        connector def loadBalancerConnector {
        participants:
            ~inPerformance: inLoadBalancer {}
            ~outPerformance: outLoadBalancer {}
        flows:
            PerformanceData from inPerformance to outPerformance
    }

    connector def userInterfaceConnector {
        participants:
            ~inUserInput: inUserInput {}
                    ~outUserInputResponse: outUserInput {} // Define an out flow for the response
            
        flows:
        UserInput from inUserInput to outUserInputResponse // Flow from in to out
    }

    connector def maintenanceManagementConnector {
        participants:
            ~inMaintenanceRequest: inMaintenanceRequest {}
                    ~outMaintenanceResponse: outMaintenanceResponse {} // Define an out flow for the response
            
        flows:
        MaintenanceRequest from inMaintenanceRequest to outMaintenanceResponse // Flow from in to out
    }

    connector def systemUpdateConnector {
        participants:
            ~inUpdateRequest: inSystemUpdate {}
            ~outUpdateStatus: outUpdateStatus {}
        flows:
            UpdateRequest from inUpdateRequest to outUpdateStatus
    }
    
}

package ParkingSystem.Components {
    import ParkingSystem.Ports;
    import ParkingSystem.Types;
    import ParkingSystem.Connectors;
    
    component def ParkingSystem {
        configuration {
            components:
            
                // Vehicle Management Subsystem
                vehicleManagementSubsystem: VehicleManagementSubsystem {
                    using ports:
                        inVehicleEntryPort: inVehicleEntry {}
                        outEntryConfirmationPort: outEntryConfirmation{}     
                        inPaymentRequestPort: inPaymentRequest{}
                        outPaymentStatusPort: outPaymentStatus{}   
                        inExitRequestPort: inExitRequest;
                        outExitConfirmationPort: outExitConfirmation;       
                        inVehicleIdentificationPort: inVehicleIdentification;
                        outVehicleRegistrationPort: outVehicleRegistration;
                        inLicensePlatePort: inLicensePlateDetection {}
                        outNotificationPort: outCarData {}
                }

                // Payment Processing Subsystem
                PaymentProcessingSubsystem: PaymentProcessingSubsystem {
                    using ports:
                        inPaymentInfoPort: inPaymentInfo {}
                        outPaymentConfirmationPort: outPaymentConfirmation {}
                        inPaymentMethodPort: inPaymentMethod {}
            
                        inStatusPortSecurityCamera: inSecurityCameraStatus {}
                        outStatusPortSecurityCamera: outSecurityCameraStatus {}
            
                        inStatusPortAutomaticBarrier: inAutomaticBarrierStatus {}
                        outStatusPortAutomaticBarrier: outAutomaticBarrierStatus {}
                
                        inStatusPortPaymentEquipment: inPaymentEquipmentStatus {}
                        outStatusPortPaymentEquipment: outPaymentEquipmentStatus {}
                }

                faultToleranceComponent: FaultToleranceComponent {
            	    using ports:
                	inSecurityCameraStatus: inSecurityCameraStatus;
                    outSecurityCameraStatus: outSecurityCameraStatus;
                    inPaymentEquipmentStatus: inPaymentEquipmentStatus;
                    outPaymentEquipmentStatus: outPaymentEquipmentStatus;
                }
        } 
    }
    
    component def PaymentProcessingSubsystem {
        configuration {
            components:
            // Payment Processing Subsystem
            paymentProcessingComponent: PaymentProcessingComponent {
                using ports:
                    inVehicleExit: inExitRequest{}               
                    
                    outPaymentConfirmationPort: outPaymentConfirmation {}
                    inStatusPortVerify: inPaymentEquipmentStatus {}
                    outPaymentStatus: outPaymentStatus {}
                    outPaymentInfo: outPaymentInfo {}
                    inPaymentInfo: inPaymentInfo {}
            }

            paymentEquipmentComponent: PaymentEquipmentComponent {
                using ports:
                    inPaymentInfoEquipment: inPaymentInfo {}
                    outPaymentInfoEquipment: outPaymentInfo {}
                
                    inPaymentMethodPort: inPaymentMethod {}
                    inStatusPort: inPaymentEquipmentStatus {}
                    outStatusPort: outPaymentEquipmentStatus {}
            }

            connectors:
                paymentStatus: connectPaymentEquipment bindings outStatusPort = inStatusPortVerify;
                paymentInfo: paymentInfo bindings outPaymentInfo = inPaymentInfoEquipment;
                paymentInfoEquipment: paymentInfo bindings outPaymentInfoEquipment = inPaymentInfo;
        }
    }
    
    
    component def BarrierSubsystem {
        configuration {
            components:
                securityCameraComponent: SecurityCameraComponent [ 1 , 100 ] { using ports :
                        inStatusPortSecurityCamera: inSecurityCameraStatus {}
                        outStatusPortSecurityCamera: outSecurityCameraStatus {}
                        outImageData: outImageData {}
                }
                automaticBarrierComponent: AutomaticBarrierComponent [ 1 , 100 ] { using ports :
                        inStatusPort: inAutomaticBarrierStatus {}
                        outStatusPort: outAutomaticBarrierStatus {}
                }
        
                licensePlateDetectionComponent: LicensePlateDetectionComponent {
                    using ports:
                        inImageData: inImageData [ 1 , 100 ] ;
                        outCarData: outCarData {}
                }

            connectors:
                imageDataConnector: connectImageData bindings   outImageData = inImageData;
        }
    }
    
    
    component def VehicleManagementSubsystem {
        configuration {
            components:
                vehicleEntryComponent: VehicleEntryComponent {
                    using ports:
                        inVehicleEntry: inVehicleEntry{}
                        outStatusPort: outAutomaticBarrierStatus {}
                }

                vehicleExitComponent: VehicleExitComponent {
                    using ports:
                        inVehicleExit: inExitRequest{}
                        outStatusPortExit: outAutomaticBarrierStatus {}
                        inPaymentConfirmation: inPaymentStatus {}
                }   
                
                paymentProcessingSubsystem: PaymentProcessingSubsystem {
                    using ports:
                        inVehicleExitPayment: inExitRequest{}
                        outPaymentConfirmationPort: outPaymentConfirmation {}
                }
                
                BarrierSubsystem : BarrierSubsystem {
                    using ports:
                        outCarData: outCarData {}
                        inStatusPort: inAutomaticBarrierStatus {}  
                }
                
                connectors:
                    vehicleEntryData: vehicleInfo bindings   outCarData = inVehicleEntry;
                    vehicleEntryConnector2: vehicleInfo bindings  outStatusPort = inStatusPort;
                
                    vehicleExitData: vehicleInfo bindings   outCarData = inVehicleExit;
                    vehicleExitStatus: vehicleInfo bindings  outStatusPortExit = inStatusPort;

                    vehiclePaymentData: vehicleInfo bindings   outCarData = inVehicleExitPayment;
                    vehiclePaymentStatus: paymentInfo bindings  outPaymentConfirmationPort = inPaymentConfirmation;
        }
    }

    component def FaultToleranceComponent {
        ports:
            inSecurityCameraStatus: inSecurityCameraStatus;
            outSecurityCameraStatus: outSecurityCameraStatus;
            inPaymentEquipmentStatus: inPaymentEquipmentStatus;
            outPaymentEquipmentStatus: outPaymentEquipmentStatus;
    }

    component def VehicleEntryComponent {
        ports:
            inStatusPortSecurityCamera: inSecurityCameraStatus;
            outEntryConfirmationPort: outEntryConfirmation;
    }
	component def VehicleExitComponent {
        ports:
            inPaymentConfirmation: inPaymentStatus {}
            inExitRequestPort: inExitRequest;
            outExitConfirmationPort: outExitConfirmation;
    }

    component def PaymentProcessingComponent {
        ports:
            inVehicleExit: inExitRequest{}               
            inPaymentInfoPort: inPaymentInfo {}
            outPaymentConfirmationPort: outPaymentConfirmation {}           
    }

    component def SecurityCameraComponent {
        ports:
            outImageData: outImageData {}
    
            inStatusPort: inSecurityCameraStatus;
            outStatusPort: outSecurityCameraStatus;
    }

    component def AutomaticBarrierComponent {
        ports:
            inStatusPort: inAutomaticBarrierStatus;
            outStatusPort: outAutomaticBarrierStatus;
    }

    component def PaymentEquipmentComponent {
        ports:
            inPaymentInfo: inPaymentInfo;
        
            inPaymentMethodPort: inPaymentMethod;
        
            inStatusPort: inPaymentEquipmentStatus;
            outStatusPort: outPaymentEquipmentStatus;
    }
    
        // Component for backup and recovery
    component def BackupAndRecoveryComponent {
        ports:
            inBackupPort : inBackupAndRecovery;
            outRecoveryPort : outBackupAndRecovery;
    }
     component def LicensePlateDetectionComponent {
        ports:
            inLicensePlatePort : inLicensePlateDetection;
            outNotificationPort : outCarData;
    }
    
//
  component def PerformanceOptimizationComponent {
        ports:
            inPerformance: inLoadBalancer;
            outPerformance: outLoadBalancer;
    }

    component def UserInterfaceComponent {
        ports:
            inUserInput: inUserInput;
            outUserInput: outUserInput; // Out port for user input response
    }

    component def MaintenanceManagementComponent {
        ports:
            inMaintenanceRequest: inMaintenanceRequest;
            outMaintenanceResponse: outMaintenanceResponse; // Out port for maintenance response
    }

    component def SystemUpdateComponent {
        ports:
            inUpdateRequest: inSystemUpdate;
            outUpdateStatus: outUpdateStatus;
    }
 
 
 
 activity def VehicleEntryAC(inSecurityCameraStatus: SecurityCamera ) (inStatusAutomaticBarrier: AutomaticBarrier) : (identify: VehicleRegistrationInfo) {
    body {
        actions:
            identify : IdentifyVehicleAN {
                using pins: identification : VehicleRegistrationInfo;
            }
            securityCameraIdentify : SecurityCameraIdentificationAN {
                using pins: image : ImageData;
                data : VehicleRegistrationInfo;
            }
             securityCameraIsOn : SecurityCameraOnAN {
                using pins: inSecurityCameraStatus : SecurityCamera;
            }
            
            automaticBarrierOpen : AutomaticBarrierOpenAN {
                using pins: inAutomaticBarrierStatus : AutomaticBarrier; 
                identificationAutomaticBarrier : VehicleRegistrationInfo;
            }

        delegate inSecurityCameraStatus to securityCameraIsOn 
        flow from securityCameraIsOn to image 
        flow from securityCameraIdentify to identification delegate inSecurityCameraStatus to inSecurityCameraStatus
        
        flow from data to VehicleRegistrationInfo flow from identify to identificationAutomaticBarrier flow from automaticBarrierOpen to VehicleRegistrationInfo delegate inStatusAutomaticBarrier to inAutomaticBarrierStatus delegate identify to automaticBarrierOpen
        
        datastore VehicleRegistrationInfo : VehicleRegistrationInfo {
		
                }
    }
}

     action def AutomaticBarrierOpenAN(vehicleRegistrationInfo: VehicleRegistrationInfo , automaticBarrier: AutomaticBarrier) :  VehicleRegistrationInfo {
        constraint: post-condition AutomaticBarrierOpenCondition
    }
    
    action def IdentifyVehicleAN(identification: VehicleRegistrationInfo) :  VehicleRegistrationInfo {
        constraint: post-condition VehicleIdentificationCondition
    }
    
      action def SecurityCameraIdentificationAN(image: ImageData) : VehicleRegistrationInfo {
        constraint: post-condition SecurityCameraIdentificationCondition
    }
    
       action def SecurityCameraOnAN(inSecurityCameraStatus: SecurityCamera) :  ImageData{
        constraint: post-condition SecurityCameraOnCondition
    }



    constraint SecurityCameraOnCondition(inSecurityCameraStatus: SecurityCamera) : (image: ImageData) {
   		 equation = inSecurityCameraStatus->status && inSecurityCameraStatus->location != ""
    }

 	constraint SecurityCameraIdentificationCondition(image: ImageData)  : (vehicleRegistrationInfo: VehicleRegistrationInfo) {
        equation = image->imageContent != ""
    }
     constraint VehicleIdentificationCondition(inSecurityCameraStatus: SecurityCamera) : (image: ImageData) {
            equation = inSecurityCameraStatus->status && image->imageContent != ""
    }

     constraint AutomaticBarrierOpenCondition(vehicleRegistrationInfo: VehicleRegistrationInfo, automaticBarrier: AutomaticBarrier) : (vehicleRegistrationInfo: VehicleRegistrationInfo) {
 			equation = automaticBarrier->status == true 
                && automaticBarrier->isOpen == false 
                && vehicleRegistrationInfo->identificationMethod == VehicleIdentificationMethod::licensePlateRecognition
                && vehicleRegistrationInfo->isOk
    }
    

   


activity def VehicleExitAC(inSecurityCameraStatus: SecurityCamera ) (inStatusAutomaticBarrier: AutomaticBarrier) (inStatusPaymentEquipment: PaymentEquipment) : (exitConfirmation: PaymentConfirmation) {
    body {
        actions:
                  identify : IdentifyVehicleAN {
                using pins: identification : VehicleRegistrationInfo;
            }
            securityCameraIdentify : SecurityCameraIdentificationAN {
                using pins: image : ImageData;
                data : VehicleRegistrationInfo;
            }
             securityCameraIsOn : SecurityCameraOnAN {
                using pins: inSecurityCameraStatus : SecurityCamera;
            }
            
            automaticBarrierOpen : AutomaticBarrierOpenOutAN {
                using pins: inAutomaticBarrierStatus : AutomaticBarrier; 
                paymentInfoAutomaticBarrier : PaymentInfo;
            }

            calculatePayment : CalculatePaymentAction {
                using pins: vehicleRegistrationInfo: VehicleRegistrationInfo;
            }
            acceptPayment : AcceptPaymentAction {
                using pins: paymentInfo : PaymentInfo;
                inStatusPaymentEquipment: PaymentEquipment;
            }

            confirmExit : ConfirmExitAction {
                using pins: confirmation : PaymentConfirmation; 
            }
        
        delegate inSecurityCameraStatus to securityCameraIsOn 
        delegate inStatusAutomaticBarrier to inAutomaticBarrierStatus
        delegate inSecurityCameraStatus to inSecurityCameraStatus 
        delegate inStatusPaymentEquipment to inStatusPaymentEquipment 
        
        flow from securityCameraIsOn to image 
        flow from securityCameraIdentify to identification 
        flow from identify to vehicleRegistrationInfo 
        flow from calculatePayment to paymentInfo 
        flow from VehicleRegistrationInfo to data flow from acceptPayment to confirmation flow from confirmExit to paymentInfoAutomaticBarrier delegate exitConfirmation to automaticBarrierOpen 
        
        datastore VehicleRegistrationInfo : VehicleRegistrationInfo {
		
                }
    }
}

    action def AutomaticBarrierOpenOutAN(vehicleRegistrationInfo: VehicleRegistrationInfo , automaticBarrier: AutomaticBarrier, paymentInfo : PaymentInfo) :  PaymentConfirmation {
        constraint: post-condition AutomaticBarrierOpenOutCondition
    }
    
         constraint AutomaticBarrierOpenOutCondition(vehicleRegistrationInfo: VehicleRegistrationInfo, automaticBarrier: AutomaticBarrier, paymentInfo : PaymentInfo) : (paymentConfirmation: PaymentConfirmation) {
  				 equation = automaticBarrier->status && automaticBarrier->isOpen
                && vehicleRegistrationInfo->identificationMethod == VehicleIdentificationMethod::licensePlateRecognition
                && paymentInfo->isPaid
    }
    
    

action def ConfirmExitAction(confirmation: PaymentConfirmation) : PaymentConfirmation {
    constraint: post-condition ExitConfirmationCondition
}

constraint ExitConfirmationCondition(confirmation: PaymentConfirmation) : (exitConfirmation: PaymentConfirmation) {
        equation = confirmation == PaymentConfirmation::confirmed || confirmation == PaymentConfirmation::pending

}




action def CalculatePaymentAction(vehicleRegistrationInfo : VehicleRegistrationInfo) : PaymentInfo {
    constraint: post-condition PaymentProcessingCondition
}

 constraint PaymentProcessingCondition(vehicleRegistrationInfo : VehicleRegistrationInfo ) : (paymentInfo: PaymentInfo) {
            equation = vehicleRegistrationInfo->isOk
    }

action def AcceptPaymentAction(paymentInfo: PaymentInfo) : PaymentInfo {
    constraint: post-condition PaymentConfirmationCondition
}

constraint PaymentConfirmationCondition(paymentInfo: PaymentInfo) : (paymentInfo: PaymentInfo) {
     equation = paymentInfo->isPaid

}



}


Requirement ControlEntranceExitFRD (1.0) {
    text = "The system must control vehicle entry and exit."
    Requirement EnterVehicleFRD (1.3) {
        text = "The system must allow the entry of vehicles after proper identification."
        satisfied by ParkingSystem.Components.VehicleEntryComponent;
    }
    Requirement RecordEntryExitFRD (1.1) {
        text = "The system should record the date and time of entry and exit for each vehicle."
        satisfied by ParkingSystem.Components.VehicleExitComponent;
    }
    Requirement ConfirmPaymentNFRD (1.2) {
        text = "The system should allow vehicle exit upon payment confirmation."
        }
}

Requirement VehicleIdentificationFRD (2.0) {
    text = "The system must provide methods for vehicle identification."
    satisfied by ParkingSystem.Components.LicensePlateDetectionComponent;
    Requirement LicensePlateRecognitionNFRD (2.1) {
        text = "The system should offer license plate reading for vehicle identification."
    }
    Requirement ProximityCardNFRD (2.2) {
        text = "The system should support proximity card scanning for vehicle identification."
    }
    Requirement RegisterVehiclesNFRD (2.3) {
        text = "The system should register vehicles."
    }
}

Requirement PaymentProcessingFRD (3.0) {
    text = "The system must handle payment processing."
    Requirement CalculateParkingFeesNFRD (3.1) {
        text = "The system should calculate parking fees based on the duration of the stay."
    }
    Requirement AcceptPaymentMethodsNFRD (3.2) {
        text = "The system must accept various payment methods, including Pix and credit cards."
    }
}

Requirement EquipmentInstallationNFRD (4.0) {
    text = "The system should manage necessary equipment."
    Requirement SecurityCamerasNFRD (4.1) {
        text = "The system must install security cameras for monitoring entrances and exits."
        satisfied by ParkingSystem.Components.SecurityCameraComponent;
    }
    Requirement AutomaticBarriersNFRD (4.2) {
        text = "The system should install automatic barriers for vehicle access control."
        satisfied by ParkingSystem.Components.AutomaticBarrierComponent;
    }
    Requirement PaymentEquipmentNFRD (4.3) {
        text = "The system must install payment processing equipment."
        satisfied by ParkingSystem.Components.PaymentEquipmentComponent;
    }
}

Requirement ScalabilityNFRD (5.0) {
    text = "The system must be scalable for different parking sizes."
    Requirement AdaptToDifferentSizesNFRD (5.1) {
        text = "The system should be adaptable to various parking sizes, from small lots to large garages."
    }
    Requirement AddEntryExitPointsNFRD (5.2) {
        text = "It should be possible to add more entry/exit points and equipment as needed."
        satisfied by ParkingSystem.Components.ParkingSystem;
    }
}

Requirement BackupRecoveryNFRD (6.0) {
    text = "The system must have backup and recovery strategies."
    Requirement RobustFailureToleranceNFRD (6.1) {
        text = "The system should be robust and resistant to failures, ensuring control over entries and exits."
    }
    Requirement DataReplicationNFRD (6.2) {
        text = "The central system must be replicated for reliability."
    }
}

Requirement SecurityNFRD (7.0) {
    text = "The system must ensure security."
    Requirement LicensePlateDetectionNFRD (7.1) {
        text = "The system must identify altered license plates and notify operators."
    }
}

Requirement PerformanceNFRD (8.0) {
    text = "The system must provide good performance."
    Requirement ResponsiveInterfaceNFRD (8.1) {
        text = "The system should be responsive with fast response times."
    }
    Requirement HandleVolumeNFRD (8.2) {
        text = "The system should be capable of handling the expected volume of vehicles."
    }
}

Requirement UsabilityNFRD (9.0) {
    text = "The system should be user-friendly."
    Requirement UserFriendlyInterfaceNFRD (9.1) {
        text = "The system's interface should be user-friendly for operators and customers."
    }
    Requirement ClearInstructionsNFRD (9.2) {
        text = "Clear instructions should guide customers during parking and payment processes."
    }
}

Requirement MaintenanceUpdatesNFRD (10.0) {
    text = "The system should support maintenance and updates."
    Requirement EfficientUpdatesNFRD (10.1) {
        text = "The system should allow for efficient updates to incorporate improvements and fixes."
    }
    Requirement PreventiveMaintenanceNFRD (10.2) {
        text = "A preventive maintenance plan should be established for the equipment."
    }
}

        

allocations {
    activity VehicleEntryAC to VehicleEntryComponent
    activity VehicleExitAC to VehicleExitComponent
 
}
